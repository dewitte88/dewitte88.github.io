<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> \(✧ω✧)/  </title>
  </head>
  <body>
    <div class="content">
  
  <div class="marquee"> <!-- These will be hidden by CSS -->
    <div class="marquee_blur" aria-hidden="true">
      <p class="marquee_text">\(✧ω✧)/</p>
    </div>
    <div class="marquee_clear">
      <p class="marquee_text">\(✧ω✧)/</p>
    </div>
  </div>
  <div class="marquee"> <!-- These will be hidden by CSS -->
    <div class="marquee_blur" aria-hidden="true">
      <p class="marquee_text">\(✧ω✧)/</p>
    </div>
    <div class="marquee_clear">
      <p class="marquee_text">\(✧ω✧)/</p>
    </div>
  </div>
  <!-- Added race setup elements -->
  <div class="race-setup">
    <label for="numRacers">Number of racers:</label>
    <input type="number" id="numRacers" name="numRacers" min="1" value="5">
    <button id="startRaceBtn">Start Race</button>
  </div>
  <p id="raceInstructions" class="race-instructions">Press 'ArrowRight' to boost your racer (the first \\(✧ω✧)/)!</p>
  <div id="raceTrack">
    <div id="finishLineMarker"></div>
  </div>
  <p class="text">
   Это легендарная гонка и в ней победит сильнейший.
  </p>
</div>
  </body>
<style>
body {
  background-color: #f0f2f5; /* Light greyish-blue background */
  font-family: 'Arial', sans-serif; /* Consistent readable font */
  color: #333; /* Dark grey text for readability */
  margin: 0;
  padding: 0;
  display: flex; /* Helps in centering content */
  justify-content: center;
  align-items: flex-start; /* Align content to the top */
  min-height: 100vh;
  overflow-x: hidden; /* Keep this */
}

.content {
  background-color: #ffffff; /* White background for content area */
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  width: 95%;
  max-width: 1000px; /* Max width for larger screens */
  margin-top: 20px; /* Margin from top */
  margin-bottom: 20px; /* Margin from bottom */
}

.marquee {
  display: none; /* Hide the old marquee elements */
}
  
/* Styles for Race Setup Area */
.race-setup {
  background-color: #e9ecef; /* Light grey for setup area */
  padding: 10px; /* Reduced padding */
  border-radius: 6px;
  border: 1px solid #ced4da;
  margin-bottom: 25px;
  text-align: center; /* Center align the content of race-setup */
}

.race-setup label {
  font-weight: bold;
  margin-right: 10px;
  color: #495057;
}

.race-setup input[type="number"] {
  padding: 8px;
  border: 1px solid #ced4da;
  border-radius: 4px;
  margin-right: 15px;
  width: 70px; /* Fixed width for number input */
}

.race-setup button {
  padding: 10px 20px;
  background-color: #28a745; /* A slightly different green */
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1em;
  transition: background-color 0.3s ease;
}

.race-setup button:hover:not(:disabled) {
  background-color: #218838; /* Darker green on hover */
}

.race-setup button:disabled {
  background-color: #cccccc; /* Grey background when disabled */
  color: #666666;
  cursor: not-allowed;
}

.race-instructions {
  text-align: center;
  margin: 10px auto 15px;
  color: #555;
  font-style: italic;
  font-size: 0.9em;
}

/* Styles for Race Track */
#raceTrack {
  background-color: #d1e7dd; /* Light green track background */
  border: 2px dashed #588157; /* Dashed border for track */
  width: 90%; /* Keep as is, or adjust if needed */
  min-height: 250px; /* Slightly increased height */
  margin: 20px auto;
  padding: 5px; /* Significantly reduced padding */
  border-radius: 6px;
  box-shadow: inset 0 0 10px rgba(0,0,0,0.1); /* Inner shadow for depth */
  position: relative; /* For potential future absolute positioning of elements inside */
}

#finishLineMarker {
  position: absolute;
  right: 10px; /* Positioned slightly from the right edge for visibility */
  top: 0;
  bottom: 0;
  width: 3px;
  background-color: red;
  box-shadow: 0 0 5px darkred;
}

/* Styles for Racers */
.racer {
  display: block; /* Keep as block */
  margin-bottom: 8px; /* Keep margin for spacing */
  padding: 2px 5px; /* Significantly reduced padding */
  background-color: #ffffff; /* White background for racers */
  border: 1px solid #adb5bd;
  border-radius: 4px; /* Softer corners */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.075); /* Subtle shadow */
  color: #212529;
  font-size: 0.9em;
  transition: transform 0.2s ease-out, box-shadow 0.2s ease-out, background-color 0.2s ease; /* Smooth transitions */
}

.player-racer {
  border-color: #007bff; /* Blue border */
  background-color: #e7f3ff; /* Light blue background */
  box-shadow: 0 0 8px rgba(0,123,255,0.5); /* Blue glow */
}

.racer:hover { /* Slight hover effect for racers */
  transform: translateY(-2px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Winner and Winner Message styles are good as per previous step, just ensure they are here */
.winner {
  background-color: gold !important; 
  font-weight: bold;
  transform: scale(1.05) translateY(-2px); /* Combine with hover effect */
  box-shadow: 0 0 15px gold, 0 4px 6px rgba(0,0,0,0.1); /* Brighter glow */
}

#winnerMessage {
  text-align: center;
  font-size: 1.8em; /* Slightly larger */
  color: #155724; /* Darker green for better contrast */
  margin-top: 20px; /* Increased margin */
  font-weight: bold;
  padding: 10px;
  background-color: #d4edda; /* Light green background for message */
  border: 1px solid #c3e6cb;
  border-radius: 4px;
}

/* Responsive consideration: make setup items stack on small screens */
@media (max-width: 600px) {
  .race-setup label,
  .race-setup input[type="number"],
  .race-setup button {
    display: block;
    width: calc(100% - 20px); /* Adjust width considering padding */
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 10px;
  }
  .race-setup input[type="number"] {
    width: calc(100% - 40px); /* Adjust for padding */
    margin-right: auto; /* Center it */
  }
  .content {
    width: 100%;
    margin-top: 0;
    margin-bottom: 0;
    border-radius: 0;
    padding: 10px;
  }
  #raceTrack {
    width: calc(100% - 20px); /* Ensure it fits with padding */
  }
}
</style>
<script>
  // Existing titleScroller function (should remain untouched)
  (function titleScroller(text) {
      document.title = text;
      console.log(text); // Keep console.log for now as per original
      setTimeout(function () {
          titleScroller(text.substr(text.length-1, 1) + text.substr(0, text.length-1));
      }, 500);
  }("\(✧ω✧)/"));

  // New race logic
  document.addEventListener('DOMContentLoaded', function() {
    const numRacersInput = document.getElementById('numRacers');
    const startRaceBtn = document.getElementById('startRaceBtn');
    const raceTrackDiv = document.getElementById('raceTrack');
    let racers = []; // Array to store racer elements
    let isRaceActive = false; // Flag to track if the race is ongoing
    let playerRacer = null; // To store a reference to the player's racer

    startRaceBtn.addEventListener('click', function() {
      startRaceBtn.disabled = true; // Disable button
      startRaceBtn.classList.add('disabled');

      // Clear previous racers and winner message
      // Ensure finishLineMarker is not cleared by innerHTML
      const kids = raceTrackDiv.childNodes;
      for(let i=kids.length-1; i>=0; i--){
          if(kids[i].id !== 'finishLineMarker'){
              raceTrackDiv.removeChild(kids[i]);
          }
      }
      racers = []; // Reset the array
      playerRacer = null; // Reset player racer reference
      isRaceActive = false; // Reset race status
      const existingWinnerMessage = document.getElementById('winnerMessage');
      if (existingWinnerMessage) {
        existingWinnerMessage.remove();
      }
      
      // Show instructions if they were hidden
      // const instructionsEl = document.getElementById('raceInstructions');
      // if (instructionsEl) instructionsEl.style.display = 'block';


      const numRacers = parseInt(numRacersInput.value) || 0;

      if (numRacers > 0) {
        for (let i = 0; i < numRacers; i++) {
          const racerElement = document.createElement('div');
          racerElement.textContent = `\\(✧ω✧)/ ${i + 1}`; // Changed text content
          racerElement.className = 'racer';
          if (i === 0) { // Designate the first racer as player
            racerElement.isPlayer = true;
            racerElement.classList.add('player-racer');
            playerRacer = racerElement; // Store reference
          }
          // Set a starting position (e.g., left: 0px) for animation later
          racerElement.style.position = 'relative'; // Needed for left positioning
          racerElement.style.left = '0px'; 
          raceTrackDiv.appendChild(racerElement);
          racers.push(racerElement);
        }
        
        if (racers.length > 0) {
          animateRacers(racers);
        }

      } else {
        raceTrackDiv.textContent = 'Please enter a valid number of racers.';
      }
    });

    let animationFrameId = null; // To store the requestAnimationFrame ID
    let winnerDeclared = false; // Flag to ensure only one winner

    function displayWinner(actualWinner) {
      isRaceActive = false; // Set race as inactive
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
      }
      
      // Clear previous winner highlights from all racers
      racers.forEach(r => {
        r.classList.remove('winner');
      });

      if (actualWinner) {
        actualWinner.classList.add('winner');
        
        // Remove old winner message if exists
        let winnerMessageEl = document.getElementById('winnerMessage');
        if (winnerMessageEl) {
          winnerMessageEl.remove();
        }

        // Create and display new winner message
        winnerMessageEl = document.createElement('p');
        winnerMessageEl.id = 'winnerMessage';
        winnerMessageEl.textContent = `${actualWinner.textContent} is the WINNER!`;
        raceTrackDiv.parentNode.insertBefore(winnerMessageEl, raceTrackDiv.nextSibling);
        console.log(`${actualWinner.textContent} is the WINNER!`);
      } else {
        console.log("Race over, but no winner determined (this shouldn't happen in finish line logic).");
      }
      startRaceBtn.disabled = false; // Re-enable button
      startRaceBtn.classList.remove('disabled');
      // const instructionsEl = document.getElementById('raceInstructions');
      // if (instructionsEl) instructionsEl.style.display = 'block'; // Show instructions again
    }

    function animateRacers(racersArray) {
      isRaceActive = true; 
      winnerDeclared = false; // Reset winner flag for new race
      
      // const instructionsEl = document.getElementById('raceInstructions');
      // if (instructionsEl) instructionsEl.style.display = 'none'; // Hide instructions during race

      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId); 
      }

      const finishLine = raceTrackDiv.offsetWidth; // Finish line is the right edge of the track

      function raceFrame() {
        if (!isRaceActive || winnerDeclared) { // Stop if race becomes inactive or winner is found
          cancelAnimationFrame(animationFrameId);
          return;
        }
        
        for (let i = 0; i < racersArray.length; i++) {
          const racer = racersArray[i];
          const currentLeft = parseInt(racer.style.left) || 0;
          const racerWidth = racer.offsetWidth; // Get actual width of the racer element

          // AI movement for all racers (player racer's movement is also influenced by key press)
          const randomIncrement = Math.floor(Math.random() * 5) + 1; // Move 1 to 5 pixels
          let newLeft = currentLeft + randomIncrement;

          // Ensure racer does not go beyond finish line due to AI move
          if (newLeft + racerWidth > finishLine) {
            newLeft = finishLine - racerWidth;
          }
          racer.style.left = newLeft + 'px';
            
          // Check for winner
          if (!winnerDeclared && (newLeft + racerWidth >= finishLine)) {
            winnerDeclared = true;
            isRaceActive = false; // Stop further input processing and other racers' main logic
            racer.style.left = (finishLine - racerWidth) + 'px'; // Ensure winner stops exactly at line
            displayWinner(racer);
            cancelAnimationFrame(animationFrameId); // Stop animation loop immediately
            return; // Exit raceFrame, winner found
          }
        }
        
        if (!winnerDeclared) { // If no winner yet, continue animation
          animationFrameId = requestAnimationFrame(raceFrame);
        }
      }
      animationFrameId = requestAnimationFrame(raceFrame);
    }

    // Keyboard control for player racer
    document.addEventListener('keydown', function(event) {
      if (event.key === 'ArrowRight' && isRaceActive && playerRacer && !winnerDeclared) {
        const currentLeft = parseInt(playerRacer.style.left) || 0;
        const boostAmount = 20; // Increased boost amount
        const racerWidth = playerRacer.offsetWidth;
        const finishLine = raceTrackDiv.offsetWidth; 

        let newPos = currentLeft + boostAmount;

        if (newPos + racerWidth > finishLine) {
          newPos = finishLine - racerWidth; // Stop exactly at the line
          // Player might win due to this boost
          if (!winnerDeclared) {
            winnerDeclared = true;
            isRaceActive = false;
            playerRacer.style.left = newPos + 'px';
            displayWinner(playerRacer);
            cancelAnimationFrame(animationFrameId);
            return;
          }
        }
        playerRacer.style.left = newPos + 'px';
      }
    });
  });
</script>
</html>
